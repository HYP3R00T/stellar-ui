---
import { getCollection } from "astro:content";
import { Icon } from "astro-icon/components";
import Link from "@/components/ui/Link.astro";

import { buildMenu } from "@/lib/utils";
import { navigationMenu } from "config";

const pathname: string = new URL(Astro.request.url).pathname;

// Helper to resolve current section based on path
function resolveTopLevelSection(pathname: string): string {
  for (const [sectionKey, sectionValue] of Object.entries(navigationMenu)) {
    for (const group of Object.values(sectionValue.items)) {
      if (group.items.some((itemPath) => itemPath === pathname)) {
        return sectionKey;
      }
    }
  }
  return "home"; // fallback
}

const topLevelSection = resolveTopLevelSection(pathname);
const sectionnavigationMenu = navigationMenu[topLevelSection];

const docs = await getCollection("docs");
const menu = sectionnavigationMenu
  ? buildMenu(docs, sectionnavigationMenu.items)
  : [];

const { class: className } = Astro.props;
---

<div
  class={`flex flex-col gap-1 m-0 w-full h-full md:border-r-[1px] border-border ${className}`}
>
  <!-- Top-level section links -->
  <div class="p-4 flex flex-col gap-1 border-b-[1px] border-border">
    {
      Object.entries(navigationMenu).map(([sectionKey, sectionValue]) => {
        const isActive = topLevelSection === sectionKey;

        const linkClass = `h-8! ${
          isActive
            ? "font-bold text-background-base! bg-accent-blue hover:bg-accent-blue!"
            : ""
        }`;
        const pClass = `${
          isActive
            ? "text-background-base! font-medium mt-0!"
            : "font-medium mt-0!"
        }`;

        return (
          <Link
            href={sectionValue.href ?? "/"}
            class={linkClass}
            key={sectionKey}
          >
            <div class="flex flex-row gap-2 items-center">
              {sectionValue.icon && <Icon name={sectionValue.icon} />}
              <p class={pClass}>{sectionValue.label ?? sectionKey}</p>
            </div>
          </Link>
        );
      })
    }
  </div>

  <!-- In-section menu -->
  <div class="flex flex-col gap-4 overflow-y-scroll py-4 pl-4 pr-[12px]">
    {
      menu.map((section) => (
        <div class="flex flex-col gap-2">
          {!section.hideTitle && (
            <div class="flex flex-row px-4 gap-2 items-center">
              {section.icon && <Icon name={section.icon} />}
              <p class="text-text-primary font-medium mt-0!">{section.title}</p>
            </div>
          )}
          <div class="flex flex-col gap-1">
            {section.items.map((item) => {
              const isActive = pathname === item.href;
              const classNameLink = isActive
                ? "text-text-primary! bg-background-surface!"
                : "text-text-secondary! hover:text-accent-primary! hover:bg-transparent!";
              return (
                <Link
                  href={item.href}
                  class={`h-6! ${classNameLink}`}
                  key={item.href}
                >
                  {item.title}
                </Link>
              );
            })}
          </div>
        </div>
      ))
    }
  </div>
</div>
