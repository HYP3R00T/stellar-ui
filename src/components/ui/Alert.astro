---
import type { HTMLAttributes } from "astro/types";
import { Icon } from "astro-icon/components";

// Color palette
type Color =
  | "blue"
  | "red"
  | "orange"
  | "yellow"
  | "green"
  | "teal"
  | "purple"
  | "pink"
  | "gray";

type Variant = "solid" | "outline";

interface AlertProps extends HTMLAttributes<"div"> {
  variant?: Variant;
  color?: Color;
  title?: string;
  icon?: string;
  class?: string;
}

const {
  variant = "solid",
  color = "blue",
  title,
  icon,
  class: className,
  ...rest
} = Astro.props as AlertProps;

const colorIcons: Record<Color, string> = {
  blue: "info",
  red: "zap",
  orange: "warning",
  yellow: "warning",
  green: "check",
  teal: "info",
  purple: "info",
  pink: "info",
  gray: "checklist",
};

const defaultTitles: Record<Color, string> = {
  blue: "Info",
  red: "Danger",
  orange: "Notice",
  yellow: "Warning",
  green: "Success",
  teal: "Info",
  purple: "Info",
  pink: "Info",
  gray: "Notice",
};

const usedIcon = icon || colorIcons[color];
const usedTitle = title || defaultTitles[color];
---

<div
  class={`alert relative w-full rounded-radius border px-4 py-3 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[--color-focus]
    ${
      variant === "solid"
        ? {
            blue: "bg-blue/100 border-blue text-background",
            red: "bg-red/100 border-red text-background",
            orange: "bg-orange/100 border-orange text-background",
            yellow: "bg-yellow/100 border-yellow text-background",
            green: "bg-green/100 border-green text-background",
            teal: "bg-teal/100 border-teal text-background",
            purple: "bg-purple/100 border-purple text-background",
            pink: "bg-pink/100 border-pink text-background",
            gray: "bg-text-secondary/100 border-text-secondary text-background",
          }[color]
        : {
            blue: "bg-transparent border-blue text-blue/100",
            red: "bg-transparent border-red text-red/100",
            orange: "bg-transparent border-orange text-orange/100",
            yellow: "bg-transparent border-yellow text-yellow/100",
            green: "bg-transparent border-green text-green/100",
            teal: "bg-transparent border-teal text-teal/100",
            purple: "bg-transparent border-purple text-purple/100",
            pink: "bg-transparent border-pink text-pink/100",
            gray: "bg-transparent border-text-secondary text-text-secondary",
          }[color]
    }
    ${className ?? ""}
  `}
  role="alert"
  aria-live={["red", "orange", "yellow"].includes(color)
    ? "assertive"
    : "polite"}
  aria-label={usedTitle}
  {...rest}
>
  <div class="flex items-center gap-2">
    {usedIcon && <Icon name={usedIcon} class="h-5 w-5 shrink-0" />}
    <div class="font-semibold leading-tight" tabindex="0">{usedTitle}</div>
  </div>
  <div>
    <slot />
  </div>
</div>

<style is:global>
  @reference "@/styles/global.css";

  .prose .alert p {
    @apply text-inherit my-0 first:mt-0;
  }

  .alert:focus-visible {
    outline: 2px solid var(--color-focus);
    outline-offset: 2px;
  }
</style>
